#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *next;
};

typedef struct node node;
node *head = NULL;  // Initialize head to NULL

void push();
void pop();
void display();

int main() {
    int opt;
    do {
        printf("\n..................\n");
        printf("1) PUSH\n");
        printf("2) POP\n");
        printf("3) DISPLAY\n");
        printf("4) QUIT\n");
        printf("..................\n");
        printf("Choose your option : ");
        scanf("%d", &opt);
        switch (opt) {
            case 1:
                push();
                break;
            case 2:
                pop();
                break;
            case 3:
                display();
                break;
            case 4:
                exit(0);
            default:
                printf("\nInvalid Operation! Try Again...\n");
        }
    } while (1);
    return 0;
}

void push() {
    int data;
    node *temp, *pre;

    printf("\nEnter value : ");
    scanf("%d", &data);

    temp = (node *)malloc(sizeof(node));
    temp->data = data;
    temp->next = NULL; // Make sure the next pointer of the new node is NULL

    if (head == NULL) {
        head = temp;
    } else {
        pre = head;
        while (pre->next != NULL) {
            pre = pre->next;
        }
        pre->next = temp;
    }
}

void pop() {
    node *temp;
    if (head == NULL) {
        printf("\nStack is Empty \n");
    } else {
        temp = head;
        if (temp->next == NULL) { // Only one node in the list
            free(temp);
            head = NULL;
        } else {
            while (temp->next->next != NULL) {
                temp = temp->next;
            }
            free(temp->next);
            temp->next = NULL;
        }
    }
}

void display() {
    node *temp;
    int count = 1;
    temp = head;

    if (head == NULL) {
        printf("\nList is Empty \n");
    } else {
        while (temp != NULL) {
            printf("List [%d] : %d\n", count, temp->data);
            temp = temp->next;
            count++;
        }
    }
}
